/*
 * Stash
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.7.0
 * Contact: hello@appscode.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.appscode.stash.client.apis;

import com.appscode.stash.client.ApiException;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import com.appscode.stash.client.models.V1alpha1Recovery;
import com.appscode.stash.client.models.V1alpha1RecoveryList;
import com.appscode.stash.client.models.V1alpha1Repository;
import com.appscode.stash.client.models.V1alpha1RepositoryList;
import com.appscode.stash.client.models.V1alpha1Restic;
import com.appscode.stash.client.models.V1alpha1ResticList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StashAppscodeComV1alpha1Api
 */
@Ignore
public class StashAppscodeComV1alpha1ApiTest {

    private final StashAppscodeComV1alpha1Api api = new StashAppscodeComV1alpha1Api();

    
    /**
     * 
     *
     * create a Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRecoveryTest() throws ApiException {
        String namespace = null;
        V1alpha1Recovery body = null;
        String pretty = null;
        V1alpha1Recovery response = api.createNamespacedRecovery(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedRepositoryTest() throws ApiException {
        String namespace = null;
        V1alpha1Repository body = null;
        String pretty = null;
        V1alpha1Repository response = api.createNamespacedRepository(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * create a Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedResticTest() throws ApiException {
        String namespace = null;
        V1alpha1Restic body = null;
        String pretty = null;
        V1alpha1Restic response = api.createNamespacedRestic(namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedRecoveryTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedRecovery(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedRepositoryTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedRepository(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedResticTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedRestic(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRecoveryTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedRecovery(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedRepositoryTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedRepository(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete a Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedResticTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1DeleteOptions body = null;
        String pretty = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedRestic(name, namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRecoveryTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RecoveryList response = api.listNamespacedRecovery(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedRepositoryTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RepositoryList response = api.listNamespacedRepository(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedResticTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1ResticList response = api.listNamespacedRestic(namespace, pretty, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRecoveryForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RecoveryList response = api.listRecoveryForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRepositoryForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1RepositoryList response = api.listRepositoryForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResticForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1alpha1ResticList response = api.listResticForAllNamespaces(_continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRecoveryTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Recovery response = api.patchNamespacedRecovery(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedRepositoryTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Repository response = api.patchNamespacedRepository(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedResticTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        V1alpha1Restic response = api.patchNamespacedRestic(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRecoveryTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Recovery response = api.readNamespacedRecovery(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedRepositoryTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Repository response = api.readNamespacedRepository(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedResticTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1alpha1Restic response = api.readNamespacedRestic(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Recovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRecoveryTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Recovery body = null;
        String pretty = null;
        V1alpha1Recovery response = api.replaceNamespacedRecovery(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Repository
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedRepositoryTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Repository body = null;
        String pretty = null;
        V1alpha1Repository response = api.replaceNamespacedRepository(name, namespace, body, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Restic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedResticTest() throws ApiException {
        String name = null;
        String namespace = null;
        V1alpha1Restic body = null;
        String pretty = null;
        V1alpha1Restic response = api.replaceNamespacedRestic(name, namespace, body, pretty);

        // TODO: test validations
    }
    
}
